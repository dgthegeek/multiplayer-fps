main.rs:
mod game_state;
mod player;
mod map;
mod network;
mod messages;
mod ui;
mod camera;
mod input;
mod render;

use bevy::prelude::*;
use game_state::{GameState, AppState};
use network::{setup_network, NetworkReceiver, NetworkSender};
use camera::{MouseSensitivity, PlayerRotation};
use input::CursorState;
use std::io::{self, Write};
use tokio::runtime::Runtime;
use bevy::diagnostic::FrameTimeDiagnosticsPlugin;

fn main() -> io::Result<()> {
    println!("Enter server IP:port (e.g., 127.0.0.1:34254): ");
    io::stdout().flush()?;
    let mut server_addr = String::new();
    io::stdin().read_line(&mut server_addr)?;
    let server_addr = server_addr.trim().to_string();

    println!("Enter UserName: ");
    io::stdout().flush()?;
    let mut player_name = String::new();
    io::stdin().read_line(&mut player_name)?;
    let player_name = player_name.trim().to_string();

    let rt = Runtime::new().unwrap();
    let (_network_sender, network_receiver, client_sender) = rt.block_on(async {
        setup_network(&server_addr, &player_name).await.unwrap()
    });

    App::new()
        .add_plugins(DefaultPlugins)
        .add_plugin(FrameTimeDiagnosticsPlugin::default())
        .add_state::<AppState>()
        .insert_resource(GameState::new(player_name))
        .insert_resource(NetworkReceiver(network_receiver))
        .insert_resource(NetworkSender(client_sender))
        .add_startup_system(render::setup_3d)
        .add_startup_system(ui::setup_ui.after(render::setup_3d))
        .add_systems((
            network::handle_network_messages,
            input::player_input,
            render::update_player_positions,
            ui::update_minimap,
            ui::update_fps_text,
            input::player_look,
            input::toggle_cursor_capture,
            player::update_bullets,
        ))
        .add_system(render::render_map.in_schedule(OnEnter(AppState::RenderMap)))
        .insert_resource(MouseSensitivity(0.005))
        .insert_resource(PlayerRotation::default())
        .add_startup_system(camera::setup_fps_camera)
        .insert_resource(CursorState { captured: true })
        .add_system(ui::game_over_screen.in_schedule(OnEnter(AppState::GameOver)))
        .add_system(ui::display_death_screen)
        .run();

    Ok(())
}

render.rs:
use bevy::prelude::*;
use crate::game_state::GameState;
use crate::player::{Player, OtherPlayer};
use crate::camera::{PlayerCamera, PlayerRotation};
pub fn setup_3d(mut commands: Commands) {
    // Ajout d'une lumière directionnelle
    commands.spawn(DirectionalLightBundle {
        directional_light: DirectionalLight {
            shadows_enabled: false,
            illuminance: 10000.0,
            ..default()
        },
        transform: Transform::from_rotation(Quat::from_rotation_x(-std::f32::consts::FRAC_PI_4)),
        ..default()
    });
    // Ajout d'une lumière ambiante
    commands.insert_resource(AmbientLight {
        color: Color::WHITE,
        brightness: 0.7,
    });
    // La caméra sera ajoutée plus tard, une fois que nous aurons la position du joueur
}
pub fn render_map(
    mut commands: Commands,
    mut game_state: ResMut<GameState>,
    mut meshes: ResMut<Assets<Mesh>>,
    mut materials: ResMut<Assets<StandardMaterial>>,
) {
    if let Some(map) = &game_state.map {
        if !game_state.map_rendered {
            for (y, row) in map.cells.iter().enumerate() {
                for (x, &is_wall) in row.iter().enumerate() {
                    if is_wall {
                        commands.spawn(PbrBundle {
                            mesh: meshes.add(Mesh::from(shape::Box::new(1.0, 3.0, 1.0))),
                            material: materials.add(Color::rgb(0.8, 0.7, 0.6).into()),
                            transform: Transform::from_xyz(x as f32, 1.5, y as f32),
                            ..default()
                        });
                    } else {
                        commands.spawn(PbrBundle {
                            mesh: meshes.add(Mesh::from(shape::Plane { size: 1.0, subdivisions: 0 })),
                            material: materials.add(Color::rgb(0.3, 0.3, 0.3).into()),
                            transform: Transform::from_xyz(x as f32, 0.0, y as f32),
                            ..default()
                        });
                    }
                }
            }
            game_state.map_rendered = true;
        }
    }
}
pub fn update_player_positions(
    mut commands: Commands,
    game_state: Res<GameState>,
    player_rotation: Res<PlayerRotation>,
    mut query_set: ParamSet<(
        Query<(Entity, &mut Transform), With<Player>>,
        Query<(Entity, &mut Transform, &OtherPlayer)>,
        Query<(Entity, &mut Transform), With<PlayerCamera>>,
    )>,
    asset_server: Res<AssetServer>,
) {
    if let Some(player_id) = &game_state.player_id {
        if let Some(&(position_x, position_y, _, is_alive)) = game_state.players.get(player_id) {
            if is_alive {
                let mut player_query = query_set.p0();
                let _player_entity = if let Ok((entity, mut transform)) = player_query.get_single_mut() {
                    transform.translation = Vec3::new(position_x, 0.0, position_y);
                    transform.rotation = Quat::from_rotation_y(player_rotation.yaw + std::f32::consts::PI);
                    entity
                } else {
                    commands.spawn((
                        SceneBundle {
                            scene: asset_server.load("models/player/Soldier.glb#Scene0"),
                            transform: Transform::from_xyz(position_x, 0.0, position_y)
                                .with_rotation(Quat::from_rotation_y(player_rotation.yaw + std::f32::consts::PI)) // Rotation de 180 degrés
                                .with_scale(Vec3::splat(0.03)),
                            ..default()
                        },
                        Player,
                    )).id()
                };

                let eye_height = 1.0;
                let forward_offset = 0.01;
                let mut camera_query = query_set.p2();
                if let Ok((_, mut camera_transform)) = camera_query.get_single_mut() {
                    let new_camera_position = Vec3::new(
                        position_x - forward_offset * player_rotation.yaw.sin(),
                        eye_height,
                        position_y - forward_offset * player_rotation.yaw.cos()
                    );
                    camera_transform.translation = new_camera_position;
                    camera_transform.rotation = Quat::from_euler(EulerRot::YXZ, player_rotation.yaw, player_rotation.pitch, 0.0);
                } else {
                    commands.spawn((
                        Camera3dBundle {
                            transform: Transform::from_xyz(
                                position_x - forward_offset * player_rotation.yaw.sin(),
                                eye_height,
                                position_y - forward_offset * player_rotation.yaw.cos(),
                            )
                            .with_rotation(Quat::from_euler(EulerRot::YXZ, player_rotation.yaw, player_rotation.pitch, 0.0)),
                            ..default()
                        },
                        PlayerCamera,
                    ));
                }
            }
        }
    }

    let mut other_players_to_remove = Vec::new();
    {
        let mut other_player_query = query_set.p1();
        for (entity, _, other_player) in other_player_query.iter_mut() {
            if let Some(&(_, _, _, is_alive)) = game_state.players.get(&other_player.name) {
                if !is_alive {
                    other_players_to_remove.push(entity);
                }
            } else {
                other_players_to_remove.push(entity);
            }
        }
    }

    for entity in other_players_to_remove {
        commands.entity(entity).despawn_recursive();
    }

    for (name, &(position_x, position_y, rotation, is_alive)) in game_state.players.iter() {
        if Some(name) != game_state.player_id.as_ref() && is_alive {
            let mut other_player_query = query_set.p1();
            let existing_player = other_player_query.iter_mut().find(|(_, _, op)| &op.name == name);
            
            if let Some((_entity, mut transform, _)) = existing_player {
                transform.translation = Vec3::new(position_x, 0.0, position_y);
                transform.rotation = Quat::from_rotation_y(rotation);
            } else {
                commands.spawn((
                    SceneBundle {
                        scene: asset_server.load("models/player/Soldier.glb#Scene0"),
                        transform: Transform::from_xyz(position_x, 0.0, position_y)
                            .with_rotation(Quat::from_rotation_y(rotation))
                            .with_scale(Vec3::splat(0.03)),
                        ..default()
                    },
                    OtherPlayer { name: name.clone() },
                ));
            }
        }
    }
}

input.rs:
use bevy::prelude::*;
use bevy::input::mouse::MouseMotion;
use bevy::window::CursorGrabMode;
use crate::game_state::GameState;
use crate::camera::{MouseSensitivity, PlayerCamera, PlayerRotation};
use crate::network::NetworkSender;
use crate::messages::ClientMessage;
use crate::player::{Bullet, PLAYER_SPEED, SHOOT_COOLDOWN};

#[derive(Resource)]
pub struct CursorState {
    pub captured: bool,
}

pub fn player_input(
    keyboard_input: Res<Input<KeyCode>>,
    mouse_input: Res<Input<MouseButton>>,
    windows: Query<&Window>,
    network_sender: Res<NetworkSender>,
    mut game_state: ResMut<GameState>,
    time: Res<Time>,
    player_rotation: Res<PlayerRotation>,
    camera_query: Query<&Transform, With<PlayerCamera>>,
    mut commands: Commands,
    mut meshes: ResMut<Assets<Mesh>>,
    mut materials: ResMut<Assets<StandardMaterial>>,
) {
    let _ = windows;
    if !game_state.is_alive {
        return;
    }
    
    let mut direction = Vec3::ZERO;
    if keyboard_input.pressed(KeyCode::S) {
        direction += Vec3::new(player_rotation.yaw.sin(), 0.0, player_rotation.yaw.cos());
    }
    if keyboard_input.pressed(KeyCode::W) {
        direction += Vec3::new(-player_rotation.yaw.sin(), 0.0, -player_rotation.yaw.cos());
    }
    if keyboard_input.pressed(KeyCode::A) {
        direction += Vec3::new(-player_rotation.yaw.cos(), 0.0, player_rotation.yaw.sin());
    }
    if keyboard_input.pressed(KeyCode::D) {
        direction += Vec3::new(player_rotation.yaw.cos(), 0.0, -player_rotation.yaw.sin());
    }
    if direction != Vec3::ZERO {
        direction = direction.normalize();
        let move_message = ClientMessage::Move { direction: (direction.x, direction.z) };
        if let Err(e) = network_sender.0.send(move_message) {
            eprintln!("Failed to send move message: {}", e);
        }
        let player_id = game_state.player_id.clone();
        if let Some(player_id) = player_id {
            if let Some(position) = game_state.players.get_mut(&player_id) {
                position.0 += direction.x * PLAYER_SPEED;
                position.1 += direction.z * PLAYER_SPEED;
            }
        }
    }
    // Gestion du tir
if mouse_input.just_pressed(MouseButton::Left) {
    let current_time = time.elapsed_seconds();
    if current_time - game_state.last_shoot_time >= SHOOT_COOLDOWN {
        game_state.last_shoot_time = current_time;
        
        if let Ok(camera_transform) = camera_query.get_single() {
            let shoot_direction = camera_transform.forward();
            let shoot_message = ClientMessage::Shoot { direction: (shoot_direction.x, shoot_direction.z) };
            if let Err(e) = network_sender.0.send(shoot_message) {
                eprintln!("Failed to send shoot message: {}", e);
            }
            println!("Player shot in direction: {:?}", (shoot_direction.x, shoot_direction.z));

            let spawn_point = camera_transform.translation + shoot_direction * 2.0;
            
            // Calculer la rotation pour aligner la capsule horizontalement
            let up = Vec3::Y;
            let _right = shoot_direction.cross(up).normalize();
            let bullet_rotation = Quat::from_rotation_arc(Vec3::Z, shoot_direction);

            commands.spawn((
                PbrBundle {
                    mesh: meshes.add(Mesh::from(shape::Capsule { 
                        radius: 0.05, 
                        rings: 0, 
                        depth: 0.5,  
                        latitudes: 8, 
                        longitudes: 18, 
                        uv_profile: shape::CapsuleUvProfile::Uniform,
                    })),
                    material: materials.add(Color::RED.into()),
                    transform: Transform::from_translation(spawn_point)
                        .with_rotation(bullet_rotation * Quat::from_rotation_x(-std::f32::consts::FRAC_PI_2)), // Rotation pour rendre la capsule horizontale
                    ..default()
                },
                Bullet {
                    lifetime: Timer::from_seconds(0.2, TimerMode::Once),
                },
            ));
        }
    }
}
}


//gerer la rotation avec le souris
pub fn player_look(
    mut motion_evr: EventReader<MouseMotion>,
    mut player_rotation: ResMut<PlayerRotation>,
    sensitivity: Res<MouseSensitivity>,
    cursor_state: Res<CursorState>,
) {
    if cursor_state.captured {
        for ev in motion_evr.iter() {
            player_rotation.yaw -= ev.delta.x * sensitivity.0;
            player_rotation.pitch -= ev.delta.y * sensitivity.0;
        }
        player_rotation.pitch = player_rotation.pitch.clamp(-1.54, 1.54);
    }
}

//pour basculer entre le jeu et dehors
pub fn toggle_cursor_capture(
    keyboard_input: Res<Input<KeyCode>>,
    mut cursor_state: ResMut<CursorState>,
    mut windows: Query<&mut Window>,
) {
    if keyboard_input.just_pressed(KeyCode::Escape) {
        cursor_state.captured = !cursor_state.captured;
        if let Ok(mut window) = windows.get_single_mut() {
            if cursor_state.captured {
                window.cursor.grab_mode = CursorGrabMode::Locked;
                window.cursor.visible = false;
            } else {
                window.cursor.grab_mode = CursorGrabMode::None;
                window.cursor.visible = true;
            }
        }
    }
}

network.rs:
use std::net::UdpSocket;
use bevy::prelude::*;
use crate::messages::{ClientMessage, ServerMessage};
use crate::game_state::{GameState, AppState};
use crossbeam_channel::{unbounded, Receiver, Sender};
#[derive(Resource)]
pub struct NetworkReceiver(pub Receiver<ServerMessage>);
#[derive(Resource)]
pub struct NetworkSender(pub Sender<ClientMessage>);
use std::sync::Arc;
pub async fn setup_network(server_addr: &str, player_name: &str) -> Result<(Sender<ServerMessage>, Receiver<ServerMessage>, Sender<ClientMessage>), Box<dyn std::error::Error>> {
    let socket = UdpSocket::bind("0.0.0.0:0")?;
    socket.connect(server_addr)?;
    println!("Connected to server at {}", server_addr);
    let (network_sender, network_receiver) = unbounded::<ServerMessage>();
    let (client_sender, client_receiver) = unbounded::<ClientMessage>();
    let socket = Arc::new(socket);
    let send_socket = Arc::clone(&socket);
    // Envoyer le message de connexion
    let join_message = ClientMessage::Join { name: player_name.to_string() };
    let serialized = serde_json::to_string(&join_message)?;
    socket.send(serialized.as_bytes())?;
    println!("Join message sent to server");
    // Clone network_sender pour l'utiliser dans la boucle de réception
    let network_sender_clone = network_sender.clone();
    
    // Lancer la boucle de réception
    tokio::spawn(async move {
        let mut buf = vec![0u8; 4096];
        loop {
            match socket.recv(&mut buf) {
                Ok(n) => {
                    if let Ok(message) = serde_json::from_slice::<ServerMessage>(&buf[..n]) {
                        if let Err(e) = network_sender_clone.send(message) {
                            eprintln!("Failed to send message to main thread: {}", e);
                        }
                    } else {
                        eprintln!("Failed to parse server message");
                    }
                }
                Err(e) => eprintln!("Failed to receive data: {}", e),
            }
        }
    });
    // Lancer la boucle d'envoi
    tokio::spawn(async move {
        loop {
            if let Ok(message) = client_receiver.try_recv() {
                let serialized = serde_json::to_string(&message).unwrap();
                if let Err(e) = send_socket.send(serialized.as_bytes()) {
                    eprintln!("Failed to send message: {}", e);
                }
            }
            tokio::time::sleep(std::time::Duration::from_millis(10)).await;
        }
    });
    Ok((network_sender, network_receiver, client_sender))
}

pub(crate) fn handle_network_messages(
    mut commands: Commands,
    mut game_state: ResMut<GameState>,
    network_receiver: Res<NetworkReceiver>,
    mut app_state: ResMut<NextState<AppState>>,
){
    for message in network_receiver.0.try_iter() {
        println!("Received message: {:?}", message);
        match message {
            ServerMessage::Welcome { map, player_id } => {
                println!("Received Welcome message with map");
                game_state.map = Some(map);
                game_state.player_id = Some(player_id);
                game_state.map_rendered = false;  // Force map re-render
                
                // Trigger map rendering
                commands.insert_resource(NextState(Some(AppState::RenderMap)));
            }
            ServerMessage::GameState { players } => {
                game_state.players = players;
            }
            ServerMessage::PlayerShot { shooter, target } => {
                if Some(target.clone()) == game_state.player_id {
                    println!("You were shot by {}!", shooter);
                } else {
                    println!("Player {} was shot by {}!", target, shooter);
                }
            }
            ServerMessage::PlayerDied { player } => {
                if Some(player.clone()) == game_state.player_id {
                    game_state.is_alive = false;
                    println!("You died!");
                } else {
                    println!("Player {} died!", player);
                }
            }
            ServerMessage::GameOver { winner, scores } => {
                println!("Game Over! Winner: {}", winner);
                println!("Scores:");
                for (name, score) in &scores {
                    println!("{}: {}", name, score);
                }
                game_state.game_over_results = Some((winner, scores));
                app_state.set(AppState::GameOver);
            }
        }
    }
}

ui.rs:
use bevy::prelude::*;
use crate::game_state::GameState;
use bevy::diagnostic::{Diagnostics, FrameTimeDiagnosticsPlugin};

pub fn game_over_screen(
    mut commands: Commands,
    game_state: Res<GameState>,
    asset_server: Res<AssetServer>,
) {
    if let Some((winner, scores)) = &game_state.game_over_results {
        commands.spawn(NodeBundle {
            style: Style {
                size: Size::new(Val::Percent(100.0), Val::Percent(100.0)),
                flex_direction: FlexDirection::Column,
                justify_content: JustifyContent::Center,
                align_items: AlignItems::Center,
                ..default()
            },
            background_color: Color::rgba(0.0, 0.0, 0.0, 0.8).into(),
            ..default()
        }).with_children(|parent| {
            parent.spawn(TextBundle::from_section(
                format!("Game Over!\nWinner: {}", winner),
                TextStyle {
                    font: asset_server.load("fonts/FiraSans-Medium.ttf"),
                    font_size: 40.0,
                    color: Color::WHITE,
                },
            ));
            parent.spawn(TextBundle::from_section(
                "Scores:",
                TextStyle {
                    font: asset_server.load("fonts/FiraSans-Medium.ttf"),
                    font_size: 30.0,
                    color: Color::WHITE,
                },
            ));
            for (name, score) in scores {
                parent.spawn(TextBundle::from_section(
                    format!("{}: {}", name, score),
                    TextStyle {
                        font: asset_server.load("fonts/FiraSans-Medium.ttf"),
                        font_size: 20.0,
                        color: Color::WHITE,
                    },
                ));
            }
        });
    }
}

pub fn display_death_screen(
    mut commands: Commands,
    game_state: Res<GameState>,
    asset_server: Res<AssetServer>,
) {
    if !game_state.is_alive {
        commands.spawn(NodeBundle {
            style: Style {
                size: Size::new(Val::Percent(100.0), Val::Percent(100.0)),
                position_type: PositionType::Absolute,
                justify_content: JustifyContent::Center,
                align_items: AlignItems::Center,
                ..default()
            },
            background_color: Color::rgba(0.0, 0.0, 0.0, 0.8).into(),
            ..default()
        }).with_children(|parent| {
            parent.spawn(TextBundle::from_section(
                "You were killed!",
                TextStyle {
                    font: asset_server.load("fonts/FiraSans-Medium.ttf"),
                    font_size: 40.0,
                    color: Color::RED,
                },
            ));
        });
    }
}

pub fn setup_ui(mut commands: Commands, asset_server: Res<AssetServer>) {
    // Minimap container
    commands.spawn((
        NodeBundle {
            style: Style {
                position_type: PositionType::Absolute,
                size: Size::new(Val::Px(150.0), Val::Px(150.0)),
                position: UiRect {
                    left: Val::Px(10.0),
                    bottom: Val::Px(10.0),
                    ..default()
                },
                ..default()
            },
            background_color: Color::rgba(0.1, 0.1, 0.1, 0.7).into(),
            ..default()
        },
        MinimapContainer,
    ));

    // FPS Text
    commands.spawn((
        TextBundle::from_section(
            "FPS: ",
            TextStyle {
                font: asset_server.load("fonts/FiraSans-Medium.ttf"),
                font_size: 20.0,
                color: Color::WHITE,
            },
        )
        .with_style(Style {
            position_type: PositionType::Absolute,
            position: UiRect {
                top: Val::Px(10.0),
                right: Val::Px(10.0),
                ..default()
            },
            ..default()
        }),
        FpsText,
    ));
}

#[derive(Component)]
pub struct MinimapContainer;

#[derive(Component)]
pub struct FpsText;

#[derive(Component)]
pub struct MinimapPlayerMarker;


pub fn update_minimap(
    game_state: Res<GameState>,
    mut commands: Commands,
    minimap_query: Query<Entity, With<MinimapContainer>>,
) {
    if let Ok(minimap_entity) = minimap_query.get_single() {
        // Remove old content
        commands.entity(minimap_entity).despawn_descendants();

        if let Some(map) = &game_state.map {
            let minimap_size = 150.0;
            let cell_size = minimap_size / map.cells.len() as f32;

            commands.entity(minimap_entity).with_children(|parent| {
                // Draw maze walls
                for (y, row) in map.cells.iter().enumerate() {
                    for (x, &is_wall) in row.iter().enumerate() {
                        if is_wall {
                            parent.spawn(NodeBundle {
                                style: Style {
                                    position_type: PositionType::Absolute,
                                    position: UiRect {
                                        left: Val::Px(x as f32 * cell_size),
                                        bottom: Val::Px(y as f32 * cell_size),
                                        ..default()
                                    },
                                    size: Size::new(Val::Px(cell_size), Val::Px(cell_size)),
                                    ..default()
                                },
                                background_color: Color::rgba(0.5, 0.5, 0.5, 0.5).into(),
                                ..default()
                            });
                        }
                    }
                }

                // Draw player marker
                if let Some(player_id) = &game_state.player_id {
                    if let Some(&(player_x, player_y, _, _)) = game_state.players.get(player_id) {
                        let marker_x = player_x * cell_size;
                        let marker_y = player_y * cell_size;

                        parent.spawn((
                            NodeBundle {
                                style: Style {
                                    position_type: PositionType::Absolute,
                                    size: Size::new(Val::Px(5.0), Val::Px(5.0)),
                                    position: UiRect {
                                        left: Val::Px(marker_x),
                                        bottom: Val::Px(marker_y),
                                        ..default()
                                    },
                                    ..default()
                                },
                                background_color: Color::RED.into(),
                                ..default()
                            },
                            MinimapPlayerMarker,
                        ));
                    }
                }
            });
        }
    }
}

pub fn update_fps_text(
    diagnostics: Res<Diagnostics>,
    mut query: Query<&mut Text, With<FpsText>>,
) {
    if let Some(fps) = diagnostics.get(FrameTimeDiagnosticsPlugin::FPS) {
        if let Some(average) = fps.average() {
            for mut text in query.iter_mut() {
                text.sections[0].value = format!("FPS: {:.2}", average);
                
                // Change color based on FPS
                let color = if average >= 50.0 {
                    Color::GREEN
                } else {
                    Color::RED
                };
                text.sections[0].style.color = color;
            }
        }
    }
}