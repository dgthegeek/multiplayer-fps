client:
main.rs:
mod game_state;
mod player;
mod map;
mod network;
mod messages;
mod ui;
mod camera;
mod input;
mod render;

use bevy::prelude::*;
use game_state::{GameState, AppState};
use network::{setup_network, NetworkReceiver, NetworkSender};
use camera::{MouseSensitivity, PlayerRotation};
use input::CursorState;
use std::io::{self, Write};
use tokio::runtime::Runtime;
use bevy::diagnostic::FrameTimeDiagnosticsPlugin;

fn main() -> io::Result<()> {
    println!("Enter server IP:port (e.g., 127.0.0.1:34254): ");
    io::stdout().flush()?;
    let mut server_addr = String::new();
    io::stdin().read_line(&mut server_addr)?;
    let server_addr = server_addr.trim().to_string();

    println!("Enter Name: ");
    io::stdout().flush()?;
    let mut player_name = String::new();
    io::stdin().read_line(&mut player_name)?;
    let player_name = player_name.trim().to_string();

    let rt = Runtime::new().unwrap();
    let (_network_sender, network_receiver, client_sender) = rt.block_on(async {
        setup_network(&server_addr, &player_name).await.unwrap()
    });

    App::new()
        .add_plugins(DefaultPlugins)
        .add_plugin(FrameTimeDiagnosticsPlugin::default())
        .add_state::<AppState>()
        .insert_resource(GameState::new(player_name))
        .insert_resource(NetworkReceiver(network_receiver))
        .insert_resource(NetworkSender(client_sender))
        .add_startup_system(render::setup_3d)
        .add_startup_system(ui::setup_ui.after(render::setup_3d))
        .add_system(network::handle_network_messages)
        .add_system(input::player_input)
        .add_system(render::update_player_positions)
        .add_system(render::render_map.in_schedule(OnEnter(AppState::RenderMap)))
        .add_system(ui::update_minimap)
        .add_system(ui::update_fps_text)
        .insert_resource(MouseSensitivity(0.005))
        .insert_resource(PlayerRotation::default())
        .add_system(input::player_look)
        .add_startup_system(camera::setup_fps_camera)
        .insert_resource(CursorState { captured: true })
        .add_system(input::toggle_cursor_capture)
        .add_system(ui::game_over_screen.in_schedule(OnEnter(AppState::GameOver)))
        .add_system(ui::display_death_screen)
        .add_system(player::update_bullets)
        .run();

    Ok(())
}

render.rs:
use bevy::prelude::*;
use crate::game_state::GameState;
use crate::player::{Player, OtherPlayer};
use crate::camera::{PlayerCamera, PlayerRotation};
pub fn setup_3d(mut commands: Commands) {
    commands.spawn((
        Camera3dBundle {
            transform: Transform::from_xyz(-2.0, 2.5, 5.0).looking_at(Vec3::ZERO, Vec3::Y),
            camera: Camera {
                order: 0, // Donnez un ordre explicite
                ..default()
            },
            ..default()
        },
        MainCamera3d, // Ajoutez ce composant pour identifier facilement cette caméra
    ));

    // Lumière directionnelle
    commands.spawn(DirectionalLightBundle {
        directional_light: DirectionalLight {
            shadows_enabled: true,
            ..default()
        },
        transform: Transform::from_rotation(Quat::from_rotation_x(-std::f32::consts::FRAC_PI_4)),
        ..default()
    });
}


#[derive(Component)]
pub struct MainCamera3d;


pub fn render_map(
    mut commands: Commands,
    mut game_state: ResMut<GameState>,
    mut meshes: ResMut<Assets<Mesh>>,
    mut materials: ResMut<Assets<StandardMaterial>>,
) {
    if let Some(map) = &game_state.map {
        if !game_state.map_rendered {
            for (y, row) in map.cells.iter().enumerate() {
                for (x, &is_wall) in row.iter().enumerate() {
                    if is_wall {
                        commands.spawn(PbrBundle {
                            mesh: meshes.add(Mesh::from(shape::Box::new(1.0, 3.0, 1.0))),
                            material: materials.add(Color::rgb(0.8, 0.7, 0.6).into()),
                            transform: Transform::from_xyz(x as f32, 1.5, y as f32),
                            ..default()
                        });
                    } else {
                        commands.spawn(PbrBundle {
                            mesh: meshes.add(Mesh::from(shape::Plane { size: 1.0, subdivisions: 0 })),
                            material: materials.add(Color::rgb(0.3, 0.3, 0.3).into()),
                            transform: Transform::from_xyz(x as f32, 0.0, y as f32),
                            ..default()
                        });
                    }
                }
            }
            game_state.map_rendered = true;
        }
    }
}
pub fn update_player_positions(
    mut commands: Commands,
    game_state: Res<GameState>,
    player_rotation: Res<PlayerRotation>,
    mut query_set: ParamSet<(
        Query<(Entity, &mut Transform), With<Player>>,
        Query<(Entity, &mut Transform, &OtherPlayer)>,
        Query<(Entity, &mut Transform), With<PlayerCamera>>,
    )>,
    asset_server: Res<AssetServer>,
) {
    if let Some(player_id) = &game_state.player_id {
        if let Some(&(position_x, position_y, _, is_alive)) = game_state.players.get(player_id) {
            if is_alive {
                let mut player_query = query_set.p0();
                let _player_entity = if let Ok((entity, mut transform)) = player_query.get_single_mut() {
                    transform.translation = Vec3::new(position_x, 0.0, position_y);
                    transform.rotation = Quat::from_rotation_y(player_rotation.yaw + std::f32::consts::PI);
                    entity
                } else {
                    commands.spawn((
                        SceneBundle {
                            scene: asset_server.load("models/player/Soldier.glb#Scene0"),
                            transform: Transform::from_xyz(position_x, 0.0, position_y)
                                .with_rotation(Quat::from_rotation_y(player_rotation.yaw + std::f32::consts::PI)) // Rotation de 180 degrés
                                .with_scale(Vec3::splat(0.03)),
                            ..default()
                        },
                        Player,
                    )).id()
                };

                let eye_height = 1.0;
                let forward_offset = 0.01;
                let mut camera_query = query_set.p2();
                if let Ok((_, mut camera_transform)) = camera_query.get_single_mut() {
                    let new_camera_position = Vec3::new(
                        position_x - forward_offset * player_rotation.yaw.sin(),
                        eye_height,
                        position_y - forward_offset * player_rotation.yaw.cos()
                    );
                    camera_transform.translation = new_camera_position;
                    camera_transform.rotation = Quat::from_euler(EulerRot::YXZ, player_rotation.yaw, player_rotation.pitch, 0.0);
                } else {
                    commands.spawn((
                        Camera3dBundle {
                            transform: Transform::from_xyz(
                                position_x - forward_offset * player_rotation.yaw.sin(),
                                eye_height,
                                position_y - forward_offset * player_rotation.yaw.cos(),
                            )
                            .with_rotation(Quat::from_euler(EulerRot::YXZ, player_rotation.yaw, player_rotation.pitch, 0.0)),
                            ..default()
                        },
                        PlayerCamera,
                    ));
                }
            }
        }
    }

    let mut other_players_to_remove = Vec::new();
    {
        let mut other_player_query = query_set.p1();
        for (entity, _, other_player) in other_player_query.iter_mut() {
            if let Some(&(_, _, _, is_alive)) = game_state.players.get(&other_player.name) {
                if !is_alive {
                    other_players_to_remove.push(entity);
                }
            } else {
                other_players_to_remove.push(entity);
            }
        }
    }

    for entity in other_players_to_remove {
        commands.entity(entity).despawn_recursive();
    }

    for (name, &(position_x, position_y, rotation, is_alive)) in game_state.players.iter() {
        if Some(name) != game_state.player_id.as_ref() && is_alive {
            let mut other_player_query = query_set.p1();
            let existing_player = other_player_query.iter_mut().find(|(_, _, op)| &op.name == name);
            
            if let Some((_entity, mut transform, _)) = existing_player {
                transform.translation = Vec3::new(position_x, 0.0, position_y);
                transform.rotation = Quat::from_rotation_y(rotation);
            } else {
                commands.spawn((
                    SceneBundle {
                        scene: asset_server.load("models/player/Soldier.glb#Scene0"),
                        transform: Transform::from_xyz(position_x, 0.0, position_y)
                            .with_rotation(Quat::from_rotation_y(rotation))
                            .with_scale(Vec3::splat(0.03)),
                        ..default()
                    },
                    OtherPlayer { name: name.clone() },
                ));
            }
        }
    }
}

ui.rs:
use bevy::prelude::*;
use crate::game_state::GameState;

pub fn game_over_screen(
    mut commands: Commands,
    game_state: Res<GameState>,
    asset_server: Res<AssetServer>,
) {
    if let Some((winner, scores)) = &game_state.game_over_results {
        commands.spawn(NodeBundle {
            style: Style {
                size: Size::new(Val::Percent(100.0), Val::Percent(100.0)),
                flex_direction: FlexDirection::Column,
                justify_content: JustifyContent::Center,
                align_items: AlignItems::Center,
                ..default()
            },
            background_color: Color::rgba(0.0, 0.0, 0.0, 0.8).into(),
            ..default()
        }).with_children(|parent| {
            parent.spawn(TextBundle::from_section(
                format!("Game Over!\nWinner: {}", winner),
                TextStyle {
                    font: asset_server.load("fonts/FiraSans-Medium.ttf"),
                    font_size: 40.0,
                    color: Color::WHITE,
                },
            ));
            parent.spawn(TextBundle::from_section(
                "Scores:",
                TextStyle {
                    font: asset_server.load("fonts/FiraSans-Medium.ttf"),
                    font_size: 30.0,
                    color: Color::WHITE,
                },
            ));
            for (name, score) in scores {
                parent.spawn(TextBundle::from_section(
                    format!("{}: {}", name, score),
                    TextStyle {
                        font: asset_server.load("fonts/FiraSans-Medium.ttf"),
                        font_size: 20.0,
                        color: Color::WHITE,
                    },
                ));
            }
        });
    }
}

pub fn display_death_screen(
    mut commands: Commands,
    game_state: Res<GameState>,
    asset_server: Res<AssetServer>,
) {
    if !game_state.is_alive {
        commands.spawn(NodeBundle {
            style: Style {
                size: Size::new(Val::Percent(100.0), Val::Percent(100.0)),
                position_type: PositionType::Absolute,
                justify_content: JustifyContent::Center,
                align_items: AlignItems::Center,
                ..default()
            },
            background_color: Color::rgba(0.0, 0.0, 0.0, 0.8).into(),
            ..default()
        }).with_children(|parent| {
            parent.spawn(TextBundle::from_section(
                "You were killed!",
                TextStyle {
                    font: asset_server.load("fonts/FiraSans-Medium.ttf"),
                    font_size: 40.0,
                    color: Color::RED,
                },
            ));
        });
    }
}

use bevy::diagnostic::{Diagnostics, FrameTimeDiagnosticsPlugin};
#[derive(Component)]
pub struct UiCamera;

pub fn setup_ui(mut commands: Commands, asset_server: Res<AssetServer>) {
    commands.spawn((
        Camera2dBundle {
            camera: Camera {
                order: 1, // Donnez un ordre explicite plus élevé que la caméra 3D
                ..default()
            },
            ..default()
        },
        UiCamera, // Ajoutez ce composant pour identifier facilement cette caméra
    ));

    // Minimap background
    commands.spawn(NodeBundle {
        style: Style {
            display: Display::Flex,
            position_type: PositionType::Absolute,
            size: Size::new(Val::Px(150.0), Val::Px(150.0)),
            position: UiRect {
                left: Val::Px(10.0),
                bottom: Val::Px(10.0),
                ..default()
            },
            ..default()
        },
        background_color: Color::rgba(0.1, 0.1, 0.1, 0.7).into(),
        ..default()
    });

    // FPS Text
    commands.spawn((
        TextBundle::from_section(
            "FPS: ",
            TextStyle {
                font: asset_server.load("fonts/FiraSans-Bold.ttf"),
                font_size: 20.0,
                color: Color::WHITE,
            },
        )
        .with_style(Style {
            display: Display::Flex,
            position_type: PositionType::Absolute,
            position: UiRect {
                top: Val::Px(10.0),
                right: Val::Px(10.0),
                ..default()
            },
            ..default()
        }),
        FpsText,
    ));
}

#[derive(Component)]
pub struct FpsText;

#[derive(Component)]
pub struct MinimapPlayerMarker;

pub fn update_minimap(
    game_state: Res<GameState>,
    mut commands: Commands,
    minimap_query: Query<Entity, With<MinimapPlayerMarker>>,
) {
    if let Some(map) = &game_state.map {
        if let Some(player_id) = &game_state.player_id {
            if let Some(&(player_x, player_y, _, _)) = game_state.players.get(player_id) {
                // Remove old player marker
                for entity in minimap_query.iter() {
                    commands.entity(entity).despawn();
                }

                // Spawn new player marker
                let minimap_size = 150.0;
                let cell_size = minimap_size / map.cells.len() as f32;
                let marker_x = player_x * cell_size;
                let marker_y = player_y * cell_size;

                commands.spawn((
                    NodeBundle {
                        style: Style {
                            display: Display::Flex,
                            position_type: PositionType::Absolute,
                            size: Size::new(Val::Px(5.0), Val::Px(5.0)),
                            position: UiRect {
                                left: Val::Px(10.0 + marker_x),
                                bottom: Val::Px(10.0 + marker_y),
                                ..default()
                            },
                            ..default()
                        },
                        background_color: Color::RED.into(),
                        ..default()
                    },
                    MinimapPlayerMarker,
                ));
            }
        }
    }
}

pub fn update_fps_text(
    diagnostics: Res<Diagnostics>,
    mut query: Query<&mut Text, With<FpsText>>,
) {
    if let Some(fps) = diagnostics.get(FrameTimeDiagnosticsPlugin::FPS) {
        if let Some(average) = fps.average() {
            for mut text in query.iter_mut() {
                text.sections[0].value = format!("FPS: {:.2}", average);
                
                // Change color based on FPS
                let color = if average >= 50.0 {
                    Color::GREEN
                } else {
                    Color::RED
                };
                text.sections[0].style.color = color;
            }
        }
    }
}

camera.rs:
use bevy::{prelude::*, window::CursorGrabMode};

use crate::input::CursorState;

#[derive(Resource)]
pub struct MouseSensitivity(pub f32);

#[derive(Resource)]
pub struct PlayerRotation {
    pub yaw: f32,
    pub pitch: f32,
}

impl Default for PlayerRotation {
    fn default() -> Self {
        Self { yaw: 0.0, pitch: 0.0 }
    }
}

#[derive(Component)]
pub struct PlayerCamera;

pub fn setup_fps_camera(mut windows: Query<&mut Window>, cursor_state: Res<CursorState>) {
    if let Ok(mut window) = windows.get_single_mut() {
        if cursor_state.captured {
            window.cursor.grab_mode = CursorGrabMode::Locked;
            window.cursor.visible = false;
        } else {
            window.cursor.grab_mode = CursorGrabMode::None;
            window.cursor.visible = true;
        }
    }
}

pas tous les fichier mais je crois ca suffit