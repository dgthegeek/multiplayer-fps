je suis en train de coder le client d'un jeu mais j'ai des chute de performance quand le joueur est en mouvement 
voici la function qui update les positions et autre :
#[derive(Component)]
pub struct WeaponModel;
pub fn update_player_positions(
    mut commands: Commands,
    game_state: Res<GameState>,
    player_rotation: Res<PlayerRotation>,
    mut query_set: ParamSet<(
        Query<(Entity, &mut Transform), With<Player>>,
        Query<(Entity, &mut Transform, &OtherPlayer)>,
        Query<(Entity, &mut Transform), With<PlayerCamera>>,
        Query<(Entity, &mut Transform), With<WeaponModel>>,
    )>,
    asset_server: Res<AssetServer>,
) {
    if let Some(player_id) = &game_state.player_id {
        if let Some(&(position_x, position_y, _, is_alive)) = game_state.players.get(player_id) {
            if is_alive {
                let eye_height = 1.6; // Adjust this to match average eye level
                let forward_offset = 0.01;
                let mut camera_query = query_set.p2();
                let new_camera_position = Vec3::new(
                    position_x - forward_offset * player_rotation.yaw.sin(),
                    eye_height,
                    position_y - forward_offset * player_rotation.yaw.cos()
                );
                let new_camera_rotation = Quat::from_euler(EulerRot::YXZ, player_rotation.yaw, player_rotation.pitch, 0.0);
                let camera_entity = if let Ok((entity, mut camera_transform)) = camera_query.get_single_mut() {
                    camera_transform.translation = new_camera_position;
                    camera_transform.rotation = new_camera_rotation;
                    entity
                } else {
                    commands.spawn((
                        Camera3dBundle {
                            transform: Transform::from_translation(new_camera_position)
                                .with_rotation(new_camera_rotation),
                            ..default()
                        },
                        PlayerCamera,
                    )).id()
                };
                // Remove player model for current player
                let mut player_query = query_set.p0();
                if let Ok((player_entity, _)) = player_query.get_single_mut() {
                    commands.entity(player_entity).despawn_recursive();
                }
            }
        }
    }
    // Update other players
    let mut other_player_query = query_set.p1();
    for (entity, mut transform, other_player) in other_player_query.iter_mut() {
        if let Some(&(x, y, rotation, is_alive)) = game_state.players.get(&other_player.name) {
            if is_alive {
                transform.translation = Vec3::new(x, 0.0, y);
                transform.rotation = Quat::from_rotation_y(rotation);
            } else {
                commands.entity(entity).despawn_recursive();
            }
        } else {
            commands.entity(entity).despawn_recursive();
        }
    }
    // Add new other players
    for (name, &(x, y, rotation, is_alive)) in game_state.players.iter() {
        if Some(name) != game_state.player_id.as_ref() && is_alive {
            let other_player_query = query_set.p1();
            if !other_player_query.iter().any(|(_, _, op)| &op.name == name) {
                commands.spawn((
                    SceneBundle {
                        scene: asset_server.load("models/player/Soldier.glb#Scene0"),
                        transform: Transform::from_xyz(x, 0.0, y)
                            .with_rotation(Quat::from_rotation_y(rotation))
                            .with_scale(Vec3::splat(0.03)),
                        ..default()
                    },
                    OtherPlayer { name: name.clone() },
                ));
            }
        }
    }
}

j'ai analyser et j'ai vu cest en effet le update de la camera qui cause le probleme en prenant plus de temps et je veux l'optimiser de facon plus efficace:
