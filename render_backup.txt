use bevy::prelude::*;
use bevy::reflect::TypeUuid;
use crate::game_state::GameState;
use crate::player::{Player, OtherPlayer};
use crate::camera::{PlayerCamera, PlayerRotation};
pub fn setup_3d(mut commands: Commands) {
    // Ajout d'une lumière directionnelle
    commands.spawn(DirectionalLightBundle {
        directional_light: DirectionalLight {
            shadows_enabled: false,
            illuminance: 10000.0,
            ..default()
        },
        transform: Transform::from_rotation(Quat::from_rotation_x(-std::f32::consts::FRAC_PI_4)),
        ..default()
    });
    // Ajout d'une lumière ambiante
    commands.insert_resource(AmbientLight {
        color: Color::WHITE,
        brightness: 0.7,
    });
    // La caméra sera ajoutée plus tard, une fois que nous aurons la position du joueur
}
use bevy::render::mesh::{Mesh, PrimitiveTopology};
use bevy::render::render_resource::{AsBindGroup, ShaderRef};

use bevy::render::render_resource::ShaderType;

#[derive(Component)]
struct MapMesh;

#[derive(AsBindGroup, TypeUuid, Clone, ShaderType)]
#[uuid = "f690fdae-d598-45ab-8225-97e2a3f056e0"]
pub struct MapMaterial {
    #[uniform(0)]
    color: Color,
}

impl Material for MapMaterial {
    fn fragment_shader() -> ShaderRef {
        "shaders/map_material.wgsl".into()
    }
}

pub fn render_map(
    mut commands: Commands,
    mut game_state: ResMut<GameState>,
    mut meshes: ResMut<Assets<Mesh>>,
    mut materials: ResMut<Assets<MapMaterial>>,
    mut standard_materials: ResMut<Assets<StandardMaterial>>,
    asset_server: Res<AssetServer>,
) {
    let _ = asset_server;
    if let Some(map) = &game_state.map {
        if !game_state.map_rendered {
            let map_width = map.cells[0].len();
            let map_height = map.cells.len();

            // Créer un seul mesh pour tous les murs intérieurs
            let mut wall_positions = Vec::new();
            let mut floor_positions = Vec::new();

            for y in 0..map_height {
                for x in 0..map_width {
                    if !is_fence_wall(x, y, map_width, map_height) {
                        if map.cells[y][x] {
                            wall_positions.push([x as f32, 1.5, y as f32]);
                        } else {
                            floor_positions.push([x as f32, 0.0, y as f32]);
                        }
                    }
                }
            }

            let wall_mesh = create_instanced_mesh(&wall_positions);
            let floor_mesh = create_instanced_mesh(&floor_positions);

            let wall_material = materials.add(MapMaterial { color: Color::rgb(0.8, 0.7, 0.6) });
            let floor_material = materials.add(MapMaterial { color: Color::rgb(0.3, 0.3, 0.3) });

            commands.spawn((
                MaterialMeshBundle {
                    mesh: meshes.add(wall_mesh),
                    material: wall_material,
                    ..default()
                },
                MapMesh,
            ));

            commands.spawn((
                MaterialMeshBundle {
                    mesh: meshes.add(floor_mesh),
                    material: floor_material,
                    ..default()
                },
                MapMesh,
            ));

            // Rendre les murs de clôture
            render_fence_walls(&mut commands, &mut meshes, &mut standard_materials, map_width, map_height);

            game_state.map_rendered = true;
        }
    }
}

fn render_fence_walls(
    commands: &mut Commands,
    meshes: &mut ResMut<Assets<Mesh>>,
    materials: &mut ResMut<Assets<StandardMaterial>>,
    width: usize,
    height: usize,
) {
    let fence_material = materials.add(Color::rgb(0.6, 0.6, 0.6).into());

    // Mur du haut
    commands.spawn(PbrBundle {
        mesh: meshes.add(Mesh::from(shape::Box::new(width as f32, 3.0, 1.0))),
        material: fence_material.clone(),
        transform: Transform::from_xyz((width - 1) as f32 / 2.0, 1.5, 0.0),
        ..default()
    });

    // Mur du bas
    commands.spawn(PbrBundle {
        mesh: meshes.add(Mesh::from(shape::Box::new(width as f32, 3.0, 1.0))),
        material: fence_material.clone(),
        transform: Transform::from_xyz((width - 1) as f32 / 2.0, 1.5, (height - 1) as f32),
        ..default()
    });

    // Mur de gauche
    commands.spawn(PbrBundle {
        mesh: meshes.add(Mesh::from(shape::Box::new(1.0, 3.0, height as f32))),
        material: fence_material.clone(),
        transform: Transform::from_xyz(0.0, 1.5, (height - 1) as f32 / 2.0),
        ..default()
    });

    // Mur de droite
    commands.spawn(PbrBundle {
        mesh: meshes.add(Mesh::from(shape::Box::new(1.0, 3.0, height as f32))),
        material: fence_material.clone(),
        transform: Transform::from_xyz((width - 1) as f32, 1.5, (height - 1) as f32 / 2.0),
        ..default()
    });
}

fn is_fence_wall(x: usize, y: usize, width: usize, height: usize) -> bool {
    x == 0 || y == 0 || x == width - 1 || y == height - 1
}

fn create_instanced_mesh(positions: &[[f32; 3]]) -> Mesh {
    let mut mesh = Mesh::new(PrimitiveTopology::TriangleList);
    mesh.insert_attribute(Mesh::ATTRIBUTE_POSITION, positions.to_vec());
    mesh.set_indices(Some(bevy::render::mesh::Indices::U32(vec![0, 1, 2, 2, 3, 0])));
    mesh
}

pub fn update_player_positions(
    mut commands: Commands,
    game_state: Res<GameState>,
    player_rotation: Res<PlayerRotation>,
    mut query_set: ParamSet<(
        Query<(Entity, &mut Transform), With<Player>>,
        Query<(Entity, &mut Transform, &OtherPlayer)>,
        Query<(Entity, &mut Transform), With<PlayerCamera>>,
    )>,
    asset_server: Res<AssetServer>,
) {
    if let Some(player_id) = &game_state.player_id {
        if let Some(&(position_x, position_y, _, is_alive)) = game_state.players.get(player_id) {
            if is_alive {
                let mut player_query = query_set.p0();
                let _player_entity = if let Ok((entity, mut transform)) = player_query.get_single_mut() {
                    transform.translation = Vec3::new(position_x, 0.0, position_y);
                    transform.rotation = Quat::from_rotation_y(player_rotation.yaw + std::f32::consts::PI);
                    entity
                } else {
                    commands.spawn((
                        SceneBundle {
                            scene: asset_server.load("models/player/Soldier.glb#Scene0"),
                            transform: Transform::from_xyz(position_x, 0.0, position_y)
                                .with_rotation(Quat::from_rotation_y(player_rotation.yaw + std::f32::consts::PI)) // Rotation de 180 degrés
                                .with_scale(Vec3::splat(0.03)),
                            ..default()
                        },
                        Player,
                    )).id()
                };

                let eye_height = 1.0;
                let forward_offset = 0.01;
                let mut camera_query = query_set.p2();
                if let Ok((_, mut camera_transform)) = camera_query.get_single_mut() {
                    let new_camera_position = Vec3::new(
                        position_x - forward_offset * player_rotation.yaw.sin(),
                        eye_height,
                        position_y - forward_offset * player_rotation.yaw.cos()
                    );
                    camera_transform.translation = new_camera_position;
                    camera_transform.rotation = Quat::from_euler(EulerRot::YXZ, player_rotation.yaw, player_rotation.pitch, 0.0);
                } else {
                    commands.spawn((
                        Camera3dBundle {
                            transform: Transform::from_xyz(
                                position_x - forward_offset * player_rotation.yaw.sin(),
                                eye_height,
                                position_y - forward_offset * player_rotation.yaw.cos(),
                            )
                            .with_rotation(Quat::from_euler(EulerRot::YXZ, player_rotation.yaw, player_rotation.pitch, 0.0)),
                            ..default()
                        },
                        PlayerCamera,
                    ));
                }
            }
        }
    }

    let mut other_players_to_remove = Vec::new();
    {
        let mut other_player_query = query_set.p1();
        for (entity, _, other_player) in other_player_query.iter_mut() {
            if let Some(&(_, _, _, is_alive)) = game_state.players.get(&other_player.name) {
                if !is_alive {
                    other_players_to_remove.push(entity);
                }
            } else {
                other_players_to_remove.push(entity);
            }
        }
    }

    for entity in other_players_to_remove {
        commands.entity(entity).despawn_recursive();
    }

    for (name, &(position_x, position_y, rotation, is_alive)) in game_state.players.iter() {
        if Some(name) != game_state.player_id.as_ref() && is_alive {
            let mut other_player_query = query_set.p1();
            let existing_player = other_player_query.iter_mut().find(|(_, _, op)| &op.name == name);
            
            if let Some((_entity, mut transform, _)) = existing_player {
                transform.translation = Vec3::new(position_x, 0.0, position_y);
                transform.rotation = Quat::from_rotation_y(rotation);
            } else {
                commands.spawn((
                    SceneBundle {
                        scene: asset_server.load("models/player/Soldier.glb#Scene0"),
                        transform: Transform::from_xyz(position_x, 0.0, position_y)
                            .with_rotation(Quat::from_rotation_y(rotation))
                            .with_scale(Vec3::splat(0.03)),
                        ..default()
                    },
                    OtherPlayer { name: name.clone() },
                ));
            }
        }
    }
}

mod game_state;
mod player;
mod map;
mod network;
mod messages;
mod ui;
mod camera;
mod input;
mod render;

use bevy::prelude::*;
use game_state::{GameState, AppState};
use network::{setup_network, NetworkReceiver, NetworkSender};
use camera::{MouseSensitivity, PlayerRotation};
use input::CursorState;
use render::MapMaterial;
use std::io::{self, Write};
use tokio::runtime::Runtime;
use bevy::diagnostic::FrameTimeDiagnosticsPlugin;

fn main() -> io::Result<()> {
    println!("Enter server IP:port (e.g., 127.0.0.1:34254): ");
    io::stdout().flush()?;
    let mut server_addr = String::new();
    io::stdin().read_line(&mut server_addr)?;
    let server_addr = server_addr.trim().to_string();

    println!("Enter UserName: ");
    io::stdout().flush()?;
    let mut player_name = String::new();
    io::stdin().read_line(&mut player_name)?;
    let player_name = player_name.trim().to_string();

    let rt = Runtime::new().unwrap();
    let (_network_sender, network_receiver, client_sender) = rt.block_on(async {
        setup_network(&server_addr, &player_name).await.unwrap()
    });

    App::new()
        .add_plugins(DefaultPlugins)
        .add_plugin(MaterialPlugin::<MapMaterial>::default())  // Add this line
        .add_plugin(FrameTimeDiagnosticsPlugin::default())
        .add_state::<AppState>()
        .insert_resource(GameState::new(player_name))
        .insert_resource(NetworkReceiver(network_receiver))
        .insert_resource(NetworkSender(client_sender))
        .add_startup_system(render::setup_3d)
        .add_startup_system(ui::setup_ui.after(render::setup_3d))
        .add_systems((
            network::handle_network_messages,
            input::player_input,
            render::update_player_positions,
            ui::update_minimap,
            ui::update_fps_text,
            input::player_look,
            input::toggle_cursor_capture,
            player::update_bullets,
        ))
        .add_system(render::render_map.in_schedule(OnEnter(AppState::RenderMap)))
        .insert_resource(MouseSensitivity(0.005))
        .insert_resource(PlayerRotation::default())
        .add_startup_system(camera::setup_fps_camera)
        .insert_resource(CursorState { captured: true })
        .add_system(ui::game_over_screen.in_schedule(OnEnter(AppState::GameOver)))
        .add_system(ui::display_death_screen)
        .run();

    Ok(())
}